{
  "hash": "de8f8d9d451c10de38c12ad62994269d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Datorlaboration 3\"\nauthor: \"Ulf Högnäs\"\nformat: html\neditor: visual\n---\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: airports\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: cherryblossom\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: usdata\n```\n\n\n:::\n:::\n\n\n\n\n## Översikt\n\nInnehåll\n\n-   Hypotest och p-värden\n    -   med randomization\n    -   med sannolikhetsmodell\n-   Konfidensintervall\n    -   med the Bootstap\n    -   med sannolikhetsmodell\n-   t-fördelningen och funktionen `t.test()`\n\nVi kommer att fokusera på andelar, precis som i föreläsning 5 och 6. Slutet av labben kommer att behandla test och konfidensintervall för sådant som inte är andelar. Vi kommer att introducera normalfördelningens kusin, t-fördelningen.\n\n## Problem 1 - Hypotestest för andel\n\n### 1.1 EUs medborgarinitiativ\n\n*Få mer att säga till om i frågor som berör dig direkt. Med ett europeiskt medborgarinitiativ kan du bidra till EU-politiken genom att uppmana EU-kommissionen att föreslå nya lagar.*\n\n[medborgarinitiativ](https://citizens-initiative.europa.eu/_sv)\n\nFör att få igenom ett medborgarinitiativ krävs namnunderskrifter\n\n*Du måste få stöd från minst en miljon EU-medborgare och samla in ett [minsta antal underskrifter i minst sju EU-länder](https://citizens-initiative.europa.eu/thresholds_sv)*\n\nFör Sverige är det minsta antalet 15 120. Låt oss säga att vi driver intiativet [**Stop Destroying Videogames**](https://citizens-initiative.europa.eu/initiatives/details/2024/000007_sv) och att vi har samlat in 18 910 underskrifter. Vi vet att vissa av dessa underskrifter är ogiltiga. Det kan till exempel vara för att den som skrivit på inte har fyllt 18 år. Om 80% eller fler av underskrifterna är giltiga så har vi nått spärren på 15 120 eftersom\n\n$$\n  18 910 \\cdot 0.80 = 15 128\n$$\n\nVi har inte tid att kontrollera samtliga underskrifter, så vi kontrollerar istället ett slumpmässig urval på 200 underskrifter. I vårt slumpmässiga urval så finner vi att 173 underskrifter är giltiga. Resterande 27 är ogiltiga.\n\n::: callout-note\n#### Uppgift 1.1\n\nAnvänd $\\textsf{R}$ för att beräkna stickprovsandelen. Spara resultatet som en variabel.\n:::\n\nVi börjar med hypotestest med randomization.\n\n1.  Antag att 80% av namnunderskrifterna är ogiltiga\n2.  Skriv \"giltig\" på 160 kort och \"ogiltig\" på 40 kort\n3.  Dra ett kort med återläggning 200 gånger, blanda mellan varje dragning.\n4.  Beräkna andelen av de 200 som blev \"giltig\"\n5.  Upprepa steg 3 och 4 tiotusen gånger.\n\nDetta tar för lång tid, så vi gör detta i $\\textsf{R}$ istället. Funktionen `rbinom()` skapar den slumpmässig vektor med dragningar av detta slag. Namnet kommer från orden *random* och *binomial*. Binomialfördelningen är en sannolikhetfördelning som vi har valt att inte ha med i kursen, trots att den är viktig. Vi nöjer oss med att säga att binomialfördelningen besvarar frågor av typen *om jag genomför ett och samma försök tio gånger, oberoende av varandra, vad är sannolikheten att jag lyckas minst åtta gånger?*\n\nHär är en rad kod som genomför randomizeringen 10 000 gånger och sparar resultaten under namnet `MI_random`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# n = antalet simuleringar\n# size = antalet \"dragna kort\" per simulering\n# prob = sannolikheten att \"lyckas\", i vårt fall att få \"giltig\" \nMI_random <- rbinom(n = 1e4, size = 200, prob = .8)\n```\n:::\n\n\n\n\n::: callout-note\n#### Uppgift 1.2\n\nAnvänd `head(MI_random, 20)` för att titta på de första 20 resulaten från din simulering. Skapa ett histogram över resultaten.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}