{
  "hash": "9e1a1981bc529a9d6416a7df467fa3c0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Datorlaboration 3\"\nauthor: \"Ulf Högnäs\"\nformat: pdf\neditor: visual\n---\n\n\n\n## Översikt\n\nInnehåll\n\n-   Hypotest och p-värden\n    -   med randomization\n    -   med sannolikhetsmodell\n-   Konfidensintervall\n    -   med the Bootstap\n    -   med sannolikhetsmodell\n-   t-fördelningen och funktionen `t.test()`\n\nVi kommer att fokusera på andelar, precis som i föreläsning 5 och 6. Slutet av labben kommer att behandla test och konfidensintervall för sådant som inte är andelar. Vi kommer att introducera normalfördelningens kusin, t-fördelningen.\n\n## Problem 1 - Hypotestest för andel\n\n### 1.1 EUs medborgarinitiativ\n\n*Få mer att säga till om i frågor som berör dig direkt. Med ett europeiskt medborgarinitiativ kan du bidra till EU-politiken genom att uppmana EU-kommissionen att föreslå nya lagar.*\n\n[medborgarinitiativ](https://citizens-initiative.europa.eu/_sv)\n\nFör att få igenom ett medborgarinitiativ krävs namnunderskrifter\n\n*Du måste få stöd från minst en miljon EU-medborgare och samla in ett [minsta antal underskrifter i minst sju EU-länder](https://citizens-initiative.europa.eu/thresholds_sv)*\n\nFör Sverige är det minsta antalet 15 120. Låt oss säga att vi driver intiativet [**Stop Destroying Videogames**](https://citizens-initiative.europa.eu/initiatives/details/2024/000007_sv) och att vi har samlat in 18 910 underskrifter. Vi vet att vissa av dessa underskrifter är ogiltiga. Det kan till exempel vara för att den som skrivit på inte har fyllt 18 år. Om 80% eller fler av underskrifterna är giltiga så har vi nått spärren på 15 120 eftersom\n\n$$\n  18 910 \\cdot 0.80 = 15 128\n$$\n\nVi har inte tid att kontrollera samtliga underskrifter, så vi kontrollerar istället ett slumpmässig urval på 200 underskrifter. I vårt slumpmässiga urval så finner vi att **176 underskrifter är giltiga**, medan resterande **23 är ogiltiga**.\n\n::: callout-note\n#### Uppgift 1.1\n\nAnvänd $\\textsf{R}$ för att beräkna stickprovsandelen. Spara resultatet som en variabel.\n:::\n\nVi börjar med hypotestest med randomization.\n\n1.  Antag att 80% av namnunderskrifterna är ogiltiga\n2.  Skriv \"giltig\" på 160 kort och \"ogiltig\" på 40 kort\n3.  Dra ett kort med återläggning 200 gånger, blanda mellan varje dragning.\n4.  Beräkna andelen som blev \"giltig\"\n5.  Upprepa steg 3 och 4 tiotusen gånger.\n\nDetta tar för lång tid, så vi gör detta i $\\textsf{R}$ istället. Funktionen `rbinom()` skapar den slumpmässig vektor med dragningar av detta slag. Namnet kommer från orden *random* och *binomial*. Binomialfördelningen är en sannolikhetfördelning som vi har valt att inte ha med i kursen, trots att den är viktig. Vi nöjer oss med att säga att binomialfördelningen besvarar frågor av typen *om jag genomför ett och samma försök tio gånger, oberoende av varandra, vad är sannolikheten att jag lyckas minst åtta gånger?*\n\nHär är en rad kod som genomför randomizeringen 10 000 gånger och sparar resultaten under namnet `MI_random`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# n = antalet simuleringar\n# size = antalet \"dragna kort\" per simulering\n# prob = sannolikheten att \"lyckas\", i vårt fall att få \"giltig\" \nMI_random <- rbinom(n = 1e4, size = 200, prob = .8)\n# titta på de första 20 resultaten\nhead(MI_random, 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 157 155 152 158 161 160 162 157 161 157 152 168 151 155 156 163 159 153 172\n[20] 160\n```\n\n\n:::\n:::\n\n\n\nNu vill vi gå från antal till andel. Andel i detta fall är ju hur stor del av 200 som blev \"giltig\". Vi delar däför varje antal i vår resultatvektor med 200:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMI_proportions <- MI_random/200\nhead(MI_proportions, 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.785 0.775 0.760 0.790 0.805 0.800 0.810 0.785 0.805 0.785 0.760 0.840\n[13] 0.755 0.775 0.780 0.815 0.795 0.765 0.860 0.800\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n#### Uppgift 1.2\n\nSkapa ett histogram över de simulerade andelarna. Antingen med `hist()` i base-$\\textsf{R}$ eller med `histogram()` från `mosaic` i lab 2. Ändra antalet `breaks` tills du tycker att det ser bra ut.\n\nVi har ju simulerat resultat under antagandet att 80% av underskrifterna är giltiga. Titta på histogrammet och jämför med den stickprovsandel som vi beräknade i Uppgift 1.1. Vad har vi visat med denna simulering? Förklara!\n:::\n\nNu ska vi skatta (uppskatta) ett p-värde. Först behöver vi hypoteser.\\\nLåt $p$ vara andelen ogiltiga underskrifter bland de 18 890.\n\n$H_0: p = 0.80$\\\n$H_0: p > 0.80$\n\nVi har också valt en gräns för statistisk signifikans. Eftersom vi vill vara nästan säkra på att vi har tillräckligt många underskrifter valde vi en låg gräns, 1%.\n\nVårt p-värde blir svaret på frågan *om den verkliga andelen giltiga underskrifter är 80%, hur ofta hade vi sett 176 giltiga eller fler, i ett stickprov på 200?*\n\n::: callout-note\n#### Uppgift 1.3\n\nAnvänd resultatet från simuleringen (``MI_proportions``) för att skatta p-värdet. Jämför p-värdet med vår gräns på 5%. Dra en slutsats. \n:::\n\n::: {.callout-tip}\n## Tips!\n\nDu kan beräkna antalet eller andelen platser i en vektor som är större eller lika med ett visst tal på följande sätt\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# skapa en vektor som du kallar \"numbers\", att testa med\nnumbers <- c(0, 7, 1, 2, 1, 8, 7, 1, 0, 0)\n# antalet platser som är större än 5\nsum(numbers>=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# andelen platser som är större än 5\nmean(numbers>=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3\n```\n\n\n:::\n:::\n\n\n\n:::\n\nSyftet med att noggrant gå igenom simulering av andel är att det ska öka er förståelse för sannolikheter och abstrakta begrepp som p-värde. I praktiken kan vi använda ``prop.test()`` istället.\n\n::: callout-note\n#### Uppgift 1.4\n\nUpprepa testet med ``prop.test()`. \n:::\n\n## Problem 2 - Hypotestest för andel\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}